<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="Content-Language" content="EN" />
<meta name="ROBOTS" content="ALL" />
<meta name="Copyright" content="Copyright (c) 2009 TAP" />
<meta http-equiv="imagetoolbar" content="false" />
<meta name="description" content="TAP communication platform" />
<meta name="keywords" content="real-time, search, TAP, microblogging, communication platform" />

<title>tap - alpha</title>

<link rel="stylesheet" href="views/style_sheets/group_manage.css" type="text/css" ></link>
<link rel="stylesheet" href="views/style_sheets/css_new_group.css" type="text/css" ></link>


<link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" />
<link rel="icon" href="images/favicon.ico" type="image/x-icon" />

<!--[if lt IE 7]>
        <script type="text/javascript" src="js/unitpngfix.js"></script>
<![endif]-->

<script src="views/javascript/mootools-1.2.3-core-yc.js" type="text/javascript"></script>
<script src="views/javascript/mootools-1.2.3.1-more.js" type="text/javascript" charset="utf-8"></script>
<script src="views/javascript/mootools-tap.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" src="views/javascript/mpmetrics.js"></script>
<script type="text/javascript"> try { mpmetrics.init('<?= METRIC_KEY ?>');} catch(err) { alert(err) } </script>
<script type="text/javascript" charset="utf-8">

/* Main Tap Object */
Tap = window.Tap || {};

Validator.addType('name', new RegExp("^[A-Za-z0-9:,\.\\\/'\\s]+$"));

Tap.CreateGroups = {
	
	localized: false,

	init: function(){
		var self = this;
		var main = $('center-col');
		this.data = {
			name: main.getElement('input[name="gr-name"]'),
			symbol: main.getElement('input[name="gr-symbol"]'),
			focus: main.getElement('input[name="gr-focus"]'),
			desc: main.getElement('textarea[name="gr-desc"]'),
			country: main.getElement('select[name="country"]').store('passed', true),
			state: main.getElement('select[name="state"]').store('passed', true),
			region: main.getElement('select[name="region"]').store('passed', true),
			town: main.getElement('select[name="town"]').store('passed', true)
		};

		var locMore = $('loc-more').slide('hide');
		$$('input[name="gr-loc"]').addEvent('click', function(){
			if (!this.match('[checked]')) return null;
			if (this.get('value') === 'yes') {
				locMore.slide('in');
				self.localized = true;
			} else {
				locMore.slide('out');
				self.localized = false;
			}
		});

		this.data.name.addEvent('blur', this.checkName.toHandler(this));
		this.data.symbol.addEvent('blur', this.checkSymbol.toHandler(this));
		this.data.focus.addEvent('blur', this.checkFocus.toHandler(this));
		this.data.desc.addEvent('blur', this.checkDescription.toHandler(this));

		$('gr-create').addEvent('click', this.onSubmit.toHandler(this));
		$('gr-pic-uploader').addEvent('change', this.uploadPic.toHandler(this));
		window.addEvent('uploaded', this.displayPic.bind(this));
		
		var country = this.data.country,
			state = this.data.state,
			region = this.data.region,
			town = this.data.town;
			state.getParent('h2').hide(); region.getParent('h2').hide(); town.getParent('h2').hide();
		country.addEvent('change', function(a, e){
			$('flagger').set('src', 'images/geo_pics/gif/' + this.get('value') + '.gif');
			state.empty().getParent('h2').hide();
			region.empty().getParent('h2').hide();
			town.empty().getParent('h2').hide();
			self.geo({
				type: 'state', 
				key: this.get('value'),
				callback: function(select){
					locMore.slide('in');
				}
			});
		});
		state.addEvent('change', function(a, e){
			region.empty().getParent('h2').hide();
			town.empty().getParent('h2').hide();
			var key = this.get('value');
			if (key == 'all') return;
			self.geo({
				type: 'region',
				key: key,
				callback: function(select){
					locMore.slide('in');
				}
			});
		});
		region.addEvent('change', function(a, e){
			town.empty().getParent('h2').hide();
			var key = this.get('value');
			if (key == 'all') return;
			self.geo({ 
				type: 'town', 
				key: key, 
				state: state.get('value'),
				callback: function(select){
					locMore.slide('in');
				}
			});
		});
	},
	
	geo: function(options){
		var self = this;
		var loader = $('geo-loader');
		var type_code = ({
			'state': 1,
			'region': 2,
			'town': 3
		})[options.type];
		new Request({
			url: 'AJAX/geo.php',
			data: (function(){
				return $extend({
					type: type_code,
					code: options.key
				}, options.state ? { state: options.state } : {});
			})(),
			onRequest: function(){
				$('geo-loader').set('text', 'Loading ' + options.type.capitalize() + 's').setStyle('display', 'block');
			},
			onSuccess: function(){
				$('geo-loader').setStyle('display', 'none');
				var response = JSON.decode(this.response.text);
				var select = $(document.body).getElement('select[name="' + options.type + '"]');
				select.empty();
				if (response.geo) {
					select.getParent('h2').show();
					response.geo.unshift({region: 'all', city: 'No ' + options.type.capitalize() });
					for (var x = response.geo.reverse().length; x--; ) {
						var item = response.geo[x];
						new Element('option', {
							value: item.region,
							text: item.city
						}).inject(select);
					}
					if ($type(options.callback) == 'function') options.callback.apply(self, [select]);
				} else {
					$('geo-loader').set('text', 'Location Complete!').setStyle('display', 'block');
				}
			}
		}).send();
	},

	uploadPic: function(el){
		if (!el.get('value').test(/\.(gif|png|bmp|jpeg|jpg)$/i)) {
			return this.showError(el, 'You can only upload GIFs, PNGs, BMPs or JPEGs.');
		}
		this.removeError(el);
		el.getParent('form').submit();
	},

	displayPic: function(data){
		var pic = $('gr-pic-uploader');
		if (data.success) {
			$('pic-preview').empty().adopt(new Element('img', {
				'src': ['/group_pics/', data.path].join('')
			}));
			this.pic = data.path;
			this.removeError(pic);
		} else {
			this.pic = null;
			this.showError(pic, data.error);
		}
	},

	checkName: function(el){
		var self = this;
		if (el.isEmpty() || !el.ofLength(2, 128)) {
			return this.showError(el, 'Name must be 2 to 128 characters.');
		} else if (!el.isName()) {
			return this.showError(el, 'Name must only contain letters and numbers');
		} else {
			new Request({
				url: '/AJAX/group_check.php',
				data: {
					group_check: true,
					post: 'name',
					gname: el.get('value')
				},
				onSuccess: function(){
					var response = JSON.decode(this.response.text);
					var more = el.getParent('h2').getNext('p.input-descr');
					if (!more.retrieve('orig')) more.store('orig', more.get('text'));
					if (response.dupe) {
						self.showError(el, 'This name is already taken');
						more.set('html', [
							'Join the group for <a href="/groups?search=',
							el.get('value'),
							'">',
							el.get('value'),
							'</a>.'
						].join(''));
						return null;
					} else {
						self.removeError(el);
					}
					if ($type(response.results) == 'array') {
						more.set('html',  [
							'View groups that are related to <a href="/groups?search=',
							el.get('value'),
							'">',
							el.get('value'),
							'</a>.'
						].join(''));
					} else {
						more.set('html', more.retrieve('orig'));
					}
				}
			}).send();
		}
		return this.removeError(el);
	},

	checkSymbol: function(el){
		var self = this;
		if (el.isEmpty() || !el.ofLength(2, 64)) {
			return this.showError(el, 'Symbol must be 2 to 64 characters.');
		} else if (!el.isAlphaNumStrict()) {
			return this.showError(el, 'Symbol must only contain letters and numbers.');
		} else {
			new Request({
				url: '/AJAX/group_check.php',
				data: {
					group_check: true,
					post: 'symbol',
					symbol: el.get('value')
				},
				onSuccess: function(){
					var response = JSON.decode(this.response.text);
					var more = el.getParent('h2').getNext('p.input-descr');
					if (!more.retrieve('orig')) more.store('orig', more.get('text'));
					if (response.dupe) {
						self.showError(el, 'This symbol is already taken');
						more.set('html', [
							'Join the group for <a href="/groups?search=',
							response.results[0].gname,
							'">',
							response.results[0].gname,
							'</a>.'
						].join(''));
						return null;
					} else {
						self.removeError(el);
						more.set('html', more.retrieve('orig'));
					}
				}
			}).send();
		}
		return this.removeError(el);
	},

	checkFocus: function(el){
		var self = this;
		var focuses = el.get('value').trim().rtrim(',').split(',');
		if (focuses.length < 3 || focuses.map(function(f){ return f.isEmpty(); }).contains(true)) {
			return this.showError(el, 'Please enter at least 3 focuses.');
		}
		return this.removeError(el);
	},

	checkDescription: function(el){
		var self = this;
		if (el.isEmpty() || !el.ofLength(20, 240)) {
			return this.showError(el, 'Description must be from 20 to 240 characters.');
		}
		return this.removeError(el);
	},

	checkCity: function(el){
		var self = this;
		if (el.isEmpty()) {
			return this.showError(el, 'Please enter a city.');
		}
		return this.removeError(el);
	},

	showError: function(el, msg){
		var parent = el.getParent('h2');
		el.addClass('input-err').store('passed', false);
		parent.getElement('span.error-msg').set({
			text: msg,
			style: 'display: inline;'
		});
	},

	removeError: function(el){
		var parent = el.getParent('h2');
		el.removeClass('input-err').store('passed', true);
		parent.getElement('span.error-msg').set({
			text: '',
			style: 'display: none;'
		});
	},

	noErrors: function(){
		return !$H(this.data).getValues().map(function(item){
			return !!item.retrieve('passed');
		}).contains(false);
	},

	onSubmit: function(_, e){
		var data = this.data;
		if (this.noErrors() && !!this.pic) {
			var req = new Request({
				'url': '/AJAX/group_create.php',
				'async': false,
				'data': {
					gname: data.name.get('value'),
					symbol: data.symbol.get('value'),
					focus: data.focus.get('value').trim().rtrim(','),
					descr: data.desc.get('value'),
					old_name: this.pic
				},
				onSuccess: function(){
					var response = JSON.decode(this.response.text);
					if (response.success) {
						$('gr-create-success').set('text', 'Group successfully created!').highlight();
						(function(){window.location = '/groups';}).delay(3000);
					} else {
						$('gr-create-success').set('text', 'There was an error with your request, please try again.').highlight();
					}
				}
			});
			if (this.localized) {
				$extend(req.options.data, { country: data.country.get('value') });
				var types = {'state': data.state, 'region': data.region, 'town': data.town};
				loopy: for (var i in types) {
					var item = types[i];
					if (item.get('value').isEmpty() || item.get('value') == 'all') break loopy;
					data[i] = item.get('value');
				}
			}
			req.send();
			mpmetrics.track('create-group', {'focus': data.focus.get('value').trim().rtrim(',')});
		} else {
			$$($H(this.data).getValues().filter(function(item){
				return !item.retrieve('passed');
			})).fireEvent('blur', [e]);
			if (!this.pic) this.showError($('gr-pic-uploader'), 'Please select a group picture');
		}
	}

};

window.addEvent('domready', Tap.CreateGroups.init.bind(Tap.CreateGroups));

</script>

</head>

<body>

	<? include(NEW_HEADER); ?>

	<div id="main">
		<div id="left-col">

			<div id="groups-tab">
				<div class="tab-in"><a href="" class="name">Group Suggestions</a>  </div>
			</div>
				<div class="tab-list">
					<ul>
						<?php foreach ($_t['random_group_results'] as $random): ?>
						<li class="list-item">
							<p style="height: 14px; font-weight: bold;"><a href="#" class="suggestion-item"><img src="/group_pics/<?= $random['pic'] ?>" style="float:left; margin-right: 10px" /><?= $random['gname'] ?></a></p>
							<p style="margin-bottom:20px; font-size: 10px"><?= $random['focus'] ?></p>
						</li>
						<?php endforeach; ?>
					</ul>
					<!-- <p class="more-btn1"><a href="">show more &raquo;</a></p> -->
					<div style="clear:both"></div>
				</div>
		</div>

		<div id="center-col">
			<div id="gr-new">
				<div id="gr-header">
					<h2 class="gr-title">Create A Group..</h2>
					<span class="gr-filters" style="padding-top: 5px"><a href="/groups" id="gr-filter1">go back to all groups &raquo;</a></span>
				</div>

				<div class="main-frame">
					<h2 class="in-title">
						Name: <input type="text" name="gr-name" maxlength="128" />
						<span class="error-msg"></span>
					</h2>
					<p class="input-descr">NAME is whatever you want the group to be called</p>
					<h2 class="in-title">
						Symbol: <input type="text" name="gr-symbol" maxlength="64" />
						<span class="error-msg"></span>
					</h2>
					<p class="input-descr">SYMBOL will be used to identify your group</p>
					<h2 class="in-title">
						Focus: <input type="text" name="gr-focus" value="" />
						<span class="error-msg"></span>
					</h2>
					<p class="input-descr">FOCUS should list the areas of interest of the group</p>
					<h2 class="in-title">
						Description: <textarea name="gr-desc" rows="3" cols="30" maxlength="240"></textarea>
						<span class="error-msg"></span>
					</h2>
					<p class="input-descr"> </p>
					<h2 class="in-title-left">Does the group have a specific location? <input class="radio-input" type="radio" name="gr-loc" value="yes"/> yes <input class="radio-input" type="radio" name="gr-loc" value="no" checked /> no</h2>
					<div id="loc-more">
						<br />
						<h2 class="in-title-left">Country:
							<select name="country" style="margin-right:140px">
								<? foreach ( $_t['init_geo_data'] as $item): ?>
								<option
									value="<?= $item['abbr2'] ?>"
									style="background: url(images/geo_pics/gif/<?= strtolower($item['abbr2']) ?>.gif) no-repeat 3% center; padding: 5px; padding-left: 30px;">
									<?= $item['name'] ?>
								</option>
								<? endforeach; ?>
							</select>
							<img id="flagger" src="images/geo_pics/gif/af.gif" style="float:right; margin-top: 5px" />
						</h2>
						<h2 class="in-title-left">State:
							<select name="state" style="margin-right:140px">
							</select>
						</h2>
						<h2 class="in-title-left">Region:
							<select name="region" style="margin-right:140px">
							</select>
						</h2>
						<h2 class="in-title-left">Town:
							<select name="town" style="margin-right:140px">
							</select>
						</h2>
					</div>
					<h2 id="geo-loader" class="loader" style="margin-left:50px">Loading Next</h2>
					<br />
					<br />

					<form enctype="multipart/form-data" action="/AJAX/group_picture_upload.php" method="post" target="picture">
						<h2 class="in-title-left">
							Group picture: <input class="file-input" type="file" id="gr-pic-uploader" name="gr-pic" value="" />
							<span class="error-msg"></span>
						</h2>
						<div id="pic-preview">
						</div>
						<iframe
							name="picture"
							style="display:none;">
						</iframe>
					</form>
					<div class="hr-shady"></div>
					<h2 class="in-title-left">Invite people to your new group:</h2>
					<h2 class="in-title"><input type="text" name="gr-contacts" value="" /></h2>
					<p class="input-descr">use your contacts, groups or e-mail addresses<br />(confirm e-mails with Enter)</p><br />
					<p id="gr-new-btns"><a href="" id="gr-create"></a><a href="/groups" id="gr-cancel" ></a></p><br />
					<p id="gr-create-success" class="input-descr" style="clear: both; width: 400px; margin:auto; margin-top:30px; text-align: center;"></p>
				</div>
				<div class="main-frame-bottom"></div>
			</div>
		</div>

		<div id="right-col">
			<h1>Help and Tips</h1>
			<h2>Choose a meaningful name and symbol.</h2>
			<p>It will be easier for new users to find your group if you choose a memorable name. Avoid using names that are complicated and hard to find. The same goes for symbols, which will be used to address taps to your group.</p>
			<h2>Search before you create!</h2>
			<p>Before creating new groups, do a quick search and see if there are already existing groups that are similar to the one you're gonna create and join them instead. It'll be easier for people to address taps if everyone is part of the same big group. If there are groups with similar names or symbols as the group you're creating, a link will be displayed so you can join them.</p>
			<h2>Keep an eye on your bacon.</h2>
			<p>If you plan on frying your bacon, make sure to keep a steady eye on your pan. Bacon could burn in an instant, and older bacon cooks faster than new bacon. So avoid multitasking when cooking bacon. Remember, the key to porcine deliciousness is proper cooking.</p>
			<h2>Focuses help.</h2>
			<p>Make sure you set proper focuses for your group. This helps in categorizing your group and enables new users to find your group among similarly named groups easily.</p>
		</div>
	</div>

	<div id="footer"></div>

</body>
</html>
