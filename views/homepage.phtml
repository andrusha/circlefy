<?php echo $_t['errors']?>
<?php $user = $_t['user'];?>
<?php $user_pic = $_t['user_pic'];?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Tap</title>
<meta name="keywords" content="" />
<meta name="description" content="" />
<!-- <link href="main.css" rel="stylesheet" type="text/css" media="screen" /> -->
<style type="text/css" media="all">@import "views/style_sheets/main.css";</style>
<style type="text/css" media="all">@import "views/style_sheets/group_manage.css";</style>

<style type="text/css" media="all">@import "views/style_sheets/TextboxList.css";</style>
<style type="text/css" media="all">@import "views/style_sheets/TextboxList.Autocomplete.css";</style>

<script type="text/javascript" src="http://<?=DOMAIN?>:8080/meteor.js"></script>

<script type="text/javascript" src="views/javascript/mootools-1.2.3-core-yc.js"></script>
<script type="text/javascript" src="views/javascript/mootools-1.2.3.1-more.js"></script>

<script type="text/javascript" src="views/javascript/TextboxList.js"></script>
<script type="text/javascript" src="views/javascript/TextboxList.Autocomplete.js"></script>
<script type="text/javascript" src="views/javascript/GrowingInput.js"></script>



 <style type="text/css" media="screen">
                        .form_tags { margin-bottom: 10px; }

                        /* Setting widget width example */
                        .textboxlist {  background:white url('../../images/icons/magnifier.png') no-repeat ;padding-left:17px; height:15px;margin-left:66px;float:left;width: 360px; }

                        /* Preloader for autocomplete */
                        .textboxlist-loading { background: url('../../images/spinner.gif') no-repeat 380px center; }

                        /* Autocomplete results styling */
                        .textboxlist-autocomplete-result { overflow: hidden; zoom: 1; }
                        .textboxlist-autocomplete-result img { float: left; padding-right: 10px; }
                        .textboxlist-autocomplete-result .online_all { float: right; padding-right: 10px; }
                        .textboxlist-autocomplete-result .online { float: right; padding-right: 10px; color:green; }
                        .textboxlist-autocomplete-result .offline { float: right; padding-right: 10px; color:red; }

                        .note { color: #666; font-size: 90%; }
                        #footer { margin: 50px; text-align: center; }
                </style>


    <script type="text/javascript" src="views/javascript/chat_window.js"></script>
    
    <script type="text/javascript">

String.prototype.trim = function() {
	return this.replace(/^\s+|\s+$/g,"");
}

Bit_Grabber2 = new Class({

	tab_counter: new Hash({}),
	offset_array: [],

	grab_bits: function(data){
		data = JSON.decode(data)
		grabber_obj.add_bit(data.cid);
		
		var self = this;
		Hash.each(data,function(value){ Hash.each(value,
		function(html,key){ 

		//This is a hack, need to change rels in Python source
		if(key == 'rel')
			key = 'rels';
			
	
		var tab_counter	= key+'_counter';
		if($(tab_counter)){
			count = self.tab_counter.get(key);
			count = count + 1;
				$(tab_counter).set('text',count);
			self.tab_counter.set(key,count);
		}

			var newel = new Element('div', {'html': html, 'style':'visibility: hidden'});
			var id = key+'_information';
			newel.inject(id,'top');
			newel.tween('opacity', 0, 1);
		//This if bracket will be stripped once active_tabs is implemented
		// and replaced with a check of an array/hash to see if the tab is visible/active
		if(key == 'groups' || key == 'friends' || key == 'rels'){

//			new Fx.Tween($(key), {property: 'background-color', link: 'chain'}).start('#fa0').start('#66FF66');
			$(key+'_bullet').src = "images/icons/bullet_blue.png";
		}
	 })    
				});
				response_event_obj.remove_action();
                                response_event_obj.add_action();
			//Actually, I realize that I could have initialzed the offsets in an array an manipulated the array... will chaange in a bit, as well as everything I did HTML with
	}
});
var bg2 = new Bit_Grabber2;


Response_Grabber = new Class({

	array_obj: [] ,
	resp_count_obj: new Hash({}),
	json_obj: null,

	initialize: function(){
	},

	grab_all: function(){
		this.json_obj = null;	
		$$('.response_mid_max').each( function ( el ) {
			el_id = el.get('id');
			this.array_obj.include(el_id.substr(5))
		}.bind(this));

		this.json_obj = JSON.encode(this.array_obj);
	},
/*
	update_resp_count: function(key){
		this.resp_count_obj.set(key,count);
	},
*/
	r_poller: function(){
			self = this;
			var last_mid = $('last_mid').innerHTML;
	
			var req_res = new Request.JSON({
				url:"AJAX/response_poller.php",
				onComplete: function(data){
					$('last_mid').innerHTML = data.new_mid;
					if(data.results != 'false'){
						results = JSON.decode(data.data);
						$each( data.data, function(val,key){
						for(i in val){
							if($type(val[i]) == 'string'){	
								if(active_convo.active_convos.contains(key)){
								new Fx.Tween($('active_'+key), {property: 'background-color', link: 'chain'}).start('#f50').start('#fff');
								$('active_'+key+'_bullet').src = "images/icons/bullet_blue.png";
								}
								class_el = '.'+key+'_resp';
								$$(class_el).each( function ( el ){
									var newel = new Element('div', {'html': val[i], 'style':'visibility: hidden'});
									newel.inject(el,'top');
									newel.tween('opacity', 0, 1);
								});

								class_el = '.'+key+'_resp_notify';
									count = self.resp_count_obj.get(key);
									count = count + 1;
									self.resp_count_obj.set(key,count);
									if(count == 1)
									msg = "<span class='new_reply'> "+count+" New Reply</span>";
									if(count > 1)
									msg = "<span class='new_reply'> "+count+" New Replies</span>";
								
								$$(class_el).each( function ( el ){
								        //var newel = new Element('div', {'html': count, styles:{'opacity' :'0'} });
                                                                        //newel.get('tween').start('opacity', 1);
									el.set('html',msg);
								});

							} else { 
								break;
							}
						}
						});
						
					}
					
				}}
			).post({'json' : self.json_obj, 'last_mid' : last_mid,'responder':true});
			
	},
	
	add_bit: function(id){
		this.array_obj.include(id);
		this.json_obj = JSON.encode(this.array_obj);
	},

	remove_bit: function(){
	//need to add this functoin to improve performance, remove bit from queue
	}

});

Response_Sender = new Class({

		add_action: function() { 
			responseBoxes = $$('.textarea_response');
			responseBoxes.each(function(el){
				el.addEvent('keydown',function(event){
					if(event.key == 'enter'){
						event.stop();
						var id = el.get('id').substr(18);
						//add active
						active_convo.add_active(el,'response');
						var text = el.value;
						var req_res = new Request.JSON({
							url:"AJAX/respond.php",
							onComplete: function(data){
								el.value = '';
							}
						}).post({'response' : text , 'channel_id' : id});
					}
				});
			});
		},

		remove_action: function(){
			responseBoxes = $$('.textarea_response');
			responseBoxes.removeEvents('keydown');
		}

});

Active_Convo = new Class({

	active_convos: [],

	get_active_list: function(){
		var self = this;
		self.active_convos = [];
		$$('.toggle_list_active').each(function(el){
			var active_id = el.id.substring(7);
			self.active_convos.include(active_id);
		});
	},

	remove_active: function(){
	var self = this;

	$$('.active_close_bullet').each(function(el){
		el.addEvent('click',function(e){
			e.stop();
			var id_seq = this.getParent().id.substring(7);
			self.active_convos.erase(id_seq);
			this.getParent().style.display = 'none';
			var req_res = new Request.JSON({
				url:"AJAX/remove_active.php"
			}).post({'remove_active' : id_seq});
		});
	});

	},
	
	add_active: function(el,type){
		if(type == 'response')
		var id = el.get('id').substring(18);

		if(type == 'bit'){	
			var id = el.get('id').substring(7);
			el = el.getElements('#textarea_response_'+id)[0];
		}

		if(!this.active_convos.contains(id)){
			var req_res = new Request.JSON({
				url:"AJAX/add_active.php"
			}).post({'add_active' : id});


			
		var full_div = el.getParent('.respond_text_area_div').get('id').substring(8);
		var full_div = 'super_bit_'+full_div;
		var bit = $(full_div);
		var bit_text = bit.getElements('.bit_text').get('text');

		var text = '';		
		bit_text.each(function(value,key){
			text += value;
		});

		text = text.trim().substring(0,14);
		
		var str_match = bit.id.replace(/(.+?[_])(?!_)(.+?[_])(?!_)(.+?[_])(?!_)(.+?[_])(?!_)(.+)/,'$3$4');
		var new_id = 'bit_'+id+'_active_aggr_0';
		var str_match = str_match.substring(0,str_match.length-1);
		str_match = new RegExp(str_match,'g');
		var inner_bit_replaced = bit.innerHTML.replace(str_match,"active_aggr");

		var new_el = new Element('div', {'html': inner_bit_replaced,'id' : new_id });
		var wrap = new Element('div'); new_el.clone(true, true).inject(wrap); var html = wrap.get('html'); wrap.destroy();
		var html = new Element('div', {'html': html,'id' : 'active_'+id+'_information' , 'class' : "sub_information"});

		
		var close_bullet= '<img class="active_close_bullet" id="active_close_'+id+'_bullet" src="images/icons/bullet_delete.png" />';
		var bullet = '<img id="active_'+id+'_bullet" src="images/icons/bullet_white.png" />';
		var new_el_li = new Element('div', {'html': bullet+text+'...'+close_bullet,'id' : 'active_'+id, 'class' : "toggle_list_el toggle_list_active", 'onclick': "show_info('active_"+id+"','Testing 1');"});


	//	$('main_information').innerHTML += html;
		html.inject($('main_information'),'top');
		new_el_li.inject($('left_tabs_list'),'bottom');
				response_event_obj.remove_action();
                                response_event_obj.add_action();
	
		active_convo.get_active_list();
		active_convo.remove_active();
		if(type != 'bit')
		show_info('active_'+id,'Testing 1');
		}
	}

});

//Obsolete
Sym_Search = new Class({


	sym_val:0,
	type_val:0,

	search:function(){
		var self = this
		$('sym_search').addEvent('submit',function(e){
		e.stop();
		keyword = $('main_sym_search').value;
		symbol = keyword.substr(0,1);
		var symbol = '#';
		if(symbol == '#')
			self.type_val = 'group_to';
		if(symbol == '@')
			self.type_val = 'friend_to';
		if(symbol == '*')
			self.type_val = 'keyword_to';

		var req_res = new Request.JSON({
                                url:"AJAX/search_assoc.php",
				onComplete: function(data){
					tbody = $('sym_results_table_body');
					tbody.empty();
					$each( data, function(val,key){
						el = new Element('tr', {'html':''} );
						elements = [];
						Hash.each(val,function(val2,key2){
							if(key2 == 'symbol')
								self.sym_val = val2;	

							elements[key2] = new Element('td', {'html': val2 } )
							elements[key2].inject(el,'bottom');
						});
							button =  new Element('td', {'html': '<img src="images/icons/bullet_add.png" />', 'class':'outside_x'} );
							button.store('symbol',self.sym_val);
							button.store('type',self.type_val);
							button.inject(el,'bottom');
						el.tween('opacity', 0, 1);
						el.inject(tbody,'top');
					}.bind(this));
					send_to_obj.outside_x();		
				}
                        }).post({'search' : keyword});
		});
	}
});


Send_To = new Class({

	stringPos: 0,
	stringPos2: 0,
	added: new Hash({'group_to': [], 'friend_to':[],'keyword_to':[]}),


	get_all:function(){
		var self = this;
		self.del_all();
		values = tb_obj.t.getValues();
		values.each(
			function(v){ self.add('group_to',v[1]); }

		);
	},
	
	add:function(type,val){
		this.added[type].include(val);
	},

	del_all:function(){
		this.added = new Hash({'group_to': [], 'friend_to':[],'keyword_to':[]});
	}

});

Intro = new Class({

	init_intro: function(){
		$$('.intro_filters').addEvent('mouseenter',function(){
			$('main_tabs').set({styles:{'background':'#FFCCCC'}});
			$('this3').set({styles:{'background':'#FFCCCC'}});
		});
		$$('.intro_filters').addEvent('mouseleave',function(){
			$('main_tabs').set({styles:{'background':'transparent'}});
			$('this3').set({styles:{'background':'transparent'}});
		});

		$$('.intro_to_box').addEvent('mouseenter',function(){
			$('to_input').set({styles:{'background':'#FFCCCC'}});
		});

		$$('.intro_to_box').addEvent('mouseleave',function(){
			$('to_input').set({styles:{'background':'#FFFFFF'}});
		});

		$$('.intro_target').addEvent('mouseenter',function(){
			$('to_input').set({styles:{'background':'#FFCCCC'}});
			$('sym_search').set({styles:{'background':'#FFCCCC'}});
			$('directions').set({styles:{'background':'#FFCCCC'}});
		});
		$$('.intro_target').addEvent('mouseleave',function(){
			$('to_input').set({styles:{'background':'#FFFFFF'}});
			$('sym_search').set({styles:{'background':'#FFFFFF'}});
			$('directions').set({styles:{'background':'transparent'}});
		});
	
	}

});

var search_friends_hash  = new Hash({
	<? 
	if($_t['friend_search_list'])
	foreach($_t['friend_search_list'] as $k => $v)
			echo "'".$v."':$k,";
	?>
});

var search_groups_hash = new Hash({
	<? 
	if($_t['group_search_list'])
	foreach($_t['group_search_list'] as $k => $v)
			echo "'".$v."':$k,";
	?>
});

var search_filters_hash = new Hash({
	<?
	if($_t['filter_search_list'])
	foreach($_t['filter_search_list'] as $k => $v)
			echo "'".$v."':$k,";
	?>
});

function stop_me(id){
	$(id).addEvent('submit',function(event){
		event.stop();
	});

}

Nav_Search = new Class({

	result:0,

	friends:function(){
		$('search_friends').addEvent('click',function(){ vanish_text(0,$('search_friends')); });
		stop_me('form_search_friends');
		this.process('search_friends',search_friends_hash,'friend');
	},

	groups:function(){
		$('search_groups').addEvent('click',function(){ vanish_text(0,$('search_groups')); });
		stop_me('form_search_groups');
		this.process('search_groups',search_groups_hash,'group');
	},
	
	rels:function(){
		$('search_rels').addEvent('click',function(){ vanish_text(0,$('search_filters')); });
		stop_me('form_search_rels');
		this.process('search_rels',search_filters_hash,'rel');
	},

	process:function(id,xhash,type){
		var self = this;
		$(id).addEvent('blur',function(){
			if(self.result == 0 || this.value == ''){
				 $(id+'_results').empty();
				$('default_'+type+'_tabs').style.display = 'block';
			}
		});

		$(id).addEvent('keyup',function(event){
			if(event.key == 'tab' || event.code == 16) return;

		
			$('default_'+type+'_tabs').style.display = 'none';

			self.result = 0;
			$(id+'_results').empty();

				val_length = this.value.length;
				val_value = this.value.toLowerCase();

				xhash.each(function(v,k){
					if(k.substr(0,val_length).toLowerCase() == val_value && (val_value != '') ){
					
						var new_img = new Element('img',{'class':'tab_bullet','id':type+'_'+v+'_bullet','src':'images/icons/bullet_white.png'});
						var new_el = new Element('li',{'html':k,'class':'toggle_list_el_new toggle_list_el toggle_list_'+type});
						new_el.adopt(new_img);
							new_el.store('symbol',k);
							new_el.store('id',v);
							new_el.store('type',type);

						$(id+'_results').adopt(new_el);	
						self.result = 1;
					} else { 
						if(self.result != 1) self.result = 0;
					}
				});
						if(!self.result){
							$(id+'_results').adopt(new Element('li',{'html':'No result for '+val_value}));
						} else { 
							self.fire_events();
						}
						
		});
	},

	fire_events:function(){
		$$('.toggle_list_el_new').each(function(el){
			el.addEvent('click',function(){
				var symbol = el.retrieve('symbol');
				var id = el.retrieve('id');
				var type = el.retrieve('type');

				show_info(type+'_'+id,symbol);

			});
		});
	}

});


Tips_Stuff = new Class({


titles : new Hash({}),
tipz:0,

init_tips:function(type){
		Cookie.write('tip_toggle',1,{ duration: 7 } );
		var self = this;
		$$('.tips').each(function(element,index) {
			if(type == 'init')
				var el_title = element.title;
			if(type == 'on')
				var el_title = self.titles.get(element.id);
			element.title = el_title;
                	var content = el_title.split('::');
	                element.store('tip:title', content[0]);
        	        element.store('tip:text', content[1]);
		});

		self.tipz = new Tips('.tips',{
			className: 'tips',
		});

		self.tipz.addEvents({
			'show': function(tip) {
				tip.fade('in');
			},
			'hide': function(tip) {
				tip.fade('out');
			}
		});
},

tips_toggle:function(){
	var self = this;
	
	$('tips_toggle').addEvent('click',function(){
		var toggle_state  = Cookie.read('tip_toggle');	
		if(toggle_state == 1)
			self.tips_off();
		else
			self.tips_on();
	});

},
tips_on: function(){
	var self = this;
	$('tips_toggle').set('html','Tips On');
	self.init_tips('on');
},

tips_off:function(){
	var self = this;
		Cookie.write('tip_toggle',0, { duration: 7 } );
		$('tips_toggle').set('html','Tips Off');

		$$('.tips').each(function(el){
			if(self.tipz != 0)
				self.tipz.detach(el);
			self.titles.set(el.id,el.title);
			el.title = '';
		});
}

});

TextBox_Stuff = new Class({

t:null,

init_it:function(){

        var self = this;
        self.t = new TextboxList('input_targets', 
{unique: true, plugins: {autocomplete: {
        minLength: 3,
	maxResults: 5,
        queryRemote: true,
        remote: {url: 'AJAX/search_assoc.php'}
}}});
}

});

Search_Toggle_Tabs = new Class({

	something:new Hash({}),
	state: new Hash({'group':0,'friend':0,'rel':0}),
	
	init: function(){
		var self = this;
		self.something.set('friend',$('form_search_friends'));
		self.something.set('group',$('form_search_groups'));
		self.something.set('rel',$('form_search_rels'));
		self.friends_toggle();
		self.groups_toggle();
		self.rels_toggle();
	},

	friends_toggle: function() { 
		var self = this;
		self.process('friend');
	},

	rels_toggle: function() { 
		var self = this;
		self.process('rel');
	},

	groups_toggle: function() { 
		var self = this;
		self.process('group');
	},

	process: function(type) { 
		var self = this;
		$('search_'+type+'s_toggle').addEvent('click',function(e){
			
			temp_store = $(type+'s_inner').clone(true,true);
			$(type+'s_inner').empty();
			$(type+'s_inner').adopt(self.something.get(type));
			self.something.set(type,temp_store);

			if(self.state.get(type)){
				self.state.set(type,0)
				$('search_'+type+'s_toggle_img').src = "images/icons/magnifier.png";
				$('search_'+type+'s_results').empty();
                                $('default_'+type+'_tabs').style.display = 'block';
			}
			else
			{
				self.state.set(type,1);
				$('search_'+type+'s_toggle_img').src = "images/icons/cancel.png";
				eval("nav_search_obj."+type+"s()");
			}
		});
	}


});


var active_convo;
var inputBox;
var grabber_obj;
var poller_obj;
var response_event_obj;
window.addEvent('domready', function() {

stt = new Search_Toggle_Tabs;
stt.init();

send_to_obj = new Send_To;

tb_obj = new TextBox_Stuff;
tb_obj.init_it();

	tips_obj = new Tips_Stuff;
	var tip_state = Cookie.read('tip_toggle');
	if(tip_state == 1){
		$('tips_toggle').set('html','Tips On');
		tips_obj.init_tips('init');
	} else { 
		$('tips_toggle').set('html','Tips Off');
		tips_obj.tips_off();
	}
		
	tips_obj.tips_toggle();

	nav_search_obj = new Nav_Search;
	nav_search_obj.friends();
	nav_search_obj.groups();
	nav_search_obj.rels();

	
	show_info('groups','Groups');


	$('submit_button').addEvent('click',function(e){
		e.stop();
		open_window($('question').value);
	});

	$('rels').addEvent('click',function(){
		show_info('rels','Filters Aggragate');
	});

	$('friends').addEvent('click',function(){
		show_info('friends','Friends Aggragate');
	});

	$('groups').addEvent('click',function(){
		show_info('groups','Groups Aggragate');
	});
   
	$('active').addEvent('click',function(){
  
		show_info('active','Active Conversations');
	});

	$('building').addEvent('click',function(){
		show_info('building','My Building');
	});
/*
	 $('main_sym_search').addEvent('click',function(event){
			vanish_text(0,this);
        });

	$('main_sym_search').addEvent('submit',function(e){
		e.stop();
	
	});
*/
	$('clear_chat_windows').addEvent('click',function(){
			clear_current_chats();
	});

	$('direct').addEvent('click',function(){
		show_info('direct','Direct Messages');
	});

	$('archives').addEvent('click',function(){
		show_info('archives','Archives');
	});

	$('question').addEvent('keypress',function(event){
        	if (event.key == 'enter'){
			open_window(document.getElementById('question').value);
                return false;
		        } else {
                return true;

        }

	});	

	$('question').addEvent('click',function() { if(this.value == 'Tap the connected...') this.value = ''; });
	$('question').addEvent('blur',function() { if(this.value == '') this.value = 'Tap the connected...'; });

	
	intro_obj = new Intro;	

	active_convo = new Active_Convo;
	active_convo.remove_active();
	active_convo.get_active_list();


	inputBox = $('question');
	responseBoxes = $$('.textarea_response');

grabber_obj = new Response_Grabber;
grabber_obj.grab_all();
grabber_obj.r_poller();
setInterval('grabber_obj.r_poller()',1000);

/*
This was the polling method to grabing the bits

poller_obj = new Bit_Grabber;
poller_obj.grab_bits();
//setInterval('poller_obj.grab_bits()',8000);
*/

/*
	var friends_slide = new Fx.Slide('friends_tab_slide', {
   		 duration: 1000,
	    transition: Fx.Transitions.Pow.easeOut
	});	
	var groups_slide = new Fx.Slide('groups_tab_slide', {
   		 duration: 1000,
	    transition: Fx.Transitions.Pow.easeOut
	});	
	var rel_slide = new Fx.Slide('rel_tab_slide', {
   		 duration: 1000,
	    transition: Fx.Transitions.Pow.easeOut
	});	
	$('clear_bullets').addEvent('click',function(e){
		$$('.tab_bullet').each(function(el){
			el.src = 'images/icons/bullet_white.png';
		});
		$$('.tab_counter').each(function(el){
			el.set('text','0');
		});
	});
*/


	
	$('rel_toggle').addEvent('click',function(e){

	});

	
	response_event_obj = new Response_Sender;
	response_event_obj.add_action();
	


});

function show_mang(mang_id){
	var current_mang = document.getElementById('current_mang').innerHTML;
	if(current_mang != ''){
		document.getElementById('mang_'+current_mang).style.display = 'none';
		document.getElementById('current_mang').innerHTML = mang_id;
		document.getElementById('mang_'+mang_id).style.display = 'block';
	} else {
		document.getElementById('current_mang').innerHTML = mang_id;
		document.getElementById('mang_'+mang_id).style.display = 'block';
	}
}

function hide_mang(mang_id){
	var current_mang = document.getElementById('current_mang').innerHTML;
	document.getElementById('mang_'+current_mang).style.display = 'none';	
	document.getElementById('current_mang').innerHTML = '';
	}

function show_info(info_id,info_display){
        var current_info = document.getElementById('current_info').innerHTML;
        var current_info_display = document.getElementById('current_info_display').innerHTML;
        if(current_info != ''){
                document.getElementById(current_info+'_information').style.display = 'none';
                document.getElementById('current_info').innerHTML = info_id;
                document.getElementById('current_info_display').innerHTML = info_display;
	/*	document.getElementById(info_id+'_bullet').src = "images/icons/bullet_yellow.png"; */
		if(current_info != info_id) {
		document.getElementById(current_info+'_bullet').src = "images/icons/bullet_white.png";
		}

                document.getElementById(info_id+'_information').style.display = 'block';
        } else {
                document.getElementById('current_info').innerHTML = info_id;
                document.getElementById('current_info_display').innerHTML = info_display;
                document.getElementById(info_id+'_information').style.display = 'block';
        }
}

function hide_info(info_id){
        var current_info = document.getElementById('current_info').innerHTML;
        document.getElementById('info_'+current_info).style.display = 'none';   
        document.getElementById('current_info').innerHTML = '';
        }

function toggle_show_response(id,e){
	var state = e.className;
	id_respond = "respond"+id;
	id_response = "responses"+id;
	
	if(state == 1){ state = 0; } else { state = 1;}
	if(state) {
		document.getElementById(id_respond).style.display = 'block';
		document.getElementById(id_response).style.display = 'block';
	}else{
		document.getElementById(id_respond).style.display = 'none';
		document.getElementById(id_response).style.display = 'none';
	}
	e.className = state;
}

function vanish_text(classAppend,e){
e.value = '';
}

function getXmlHttpRequestObject() {
        if (window.XMLHttpRequest) {
                return new XMLHttpRequest();
        } else if (window.ActiveXObject) {
                        return new ActiveXObject("Microsoft.XMLHTTP");
        } else {
                document.getElementById('errors_show').innerHTML = 'Status: Cound not create XmlHttpRequest Object.  Consider upgrading your browser.';
        }
}

function good(e,cid,uid,fuid,type){
        var postText = getXmlHttpRequestObject();
        var param = 'init=init';
                if (postText.readyState == 4 || postText.readyState == 0){
                       postText.open("POST", 'AJAX/good.php', true);
                       postText.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
                       postText.onreadystatechange = function() { handleGood(postText,cid,type,e) };
                       param += '&cid='+cid;
                       param += '&uid='+uid;
                       param += '&fuid='+fuid;
                           postText.send(param);
                }
}

function handleGood(imStatus,cid,type,e) {
        if (imStatus.readyState == 4) {
                var json_result = eval('(' + imStatus.responseText + ')');
                	document.getElementById('good_'+cid+'_'+type).innerHTML = '<img src="images/icons/accept.png" />';
			e.onclick = '';
                }
        }

function clear_current_chats(){
		var cwindow = $('chat_windows');
		if(cwindow.innerHTML == ''){  
			$('clear_err').get('tween').start('opacity',1).chain(function(){
			    this.start.delay(1400, this, ['opacity',0]);
			});
		} else {
		 cwindow.get('tween').start('opacity',0).chain(function(){
                            cwindow.set.delay(100,cwindow,['html','']);
				cwindow.set.delay(2000,cwindow,cwindow.get('tween').start('opacity',1));
                        });
	}

		
		

//or


}


    </script>

    
</head>

<body>
<span id="errors_show"></span>
<span id="last_mid"><?=$_t['max_mid'];?></span>
<?php/*
$offsets = $_t['offsets'];
foreach($offsets as $offset)
	echo '<span class="offsets">'.$offset.'</span><br/>';
*/
?>


<!-- This is the start of the 3 controlling windows -->
		<div id="links">
			<ul id="left_ul">
			
				<li id="this1"><a href="<?=ROOT?>"><img src="images/cimages/tap_logo_beta.gif" /></a></li>
				<li id="this2"><a href="<?=ROOT?>profile">Profile</a></li>
				<li id="this3"><a href="<?=ROOT?>relevancy_settings">Filters</a></li>
				<li id="this5"><a href="<?=ROOT?>groups">Groups</a></li>
			</ul>

			<ul id="right_ul">
				<li><span id="user"> Logged in as <?=$user?></span><span id="sign_out"><a href="<?=ROOT?>?logout=true">Sign Out</a></span></li>
				<li><span id="tips_toggle"></span></li>
			</ul>
		</div>

<?include(NEW_HEADER)?>

<div id="large_container">

	<div id="left_container">

		<div id="main_tabs">
			<ul id="tab_list">
				<li class="tab" id="direct" ><img class="tab_bullet" id="direct_bullet" src="images/icons/bullet_white.png" />Direct &nbsp<img src="images/icons/arrow_right.png" /> <span class="tab_counter" id="direct_counter">0</span></li>
				<li class="tab" id="building" ><img class="tab_bullet" id="building_bullet" src="images/icons/bullet_white.png" />My Building &nbsp <img src="images/icons/building.png" /> <span class="tab_counter" id="building_counter">0</span> </li>
				<li class="tab" id="friends" >
					<span id="friends_inner" class="inner_tab_content">
						<img class="tab_bullet" id="friends_bullet" src="images/icons/bullet_white.png" />
						People &nbsp 
						<img src="images/icons/connect.png" />
						<span class="tab_counter" id="friends_counter">0</span>
					</span>
					<span id="search_friends_toggle"  class="search_toggle_mag">
						<img id="search_friends_toggle_img" src="images/icons/magnifier.png" />
					</span>
				</li>

				<div id="friends_tab_slide">
				<span class="hidden_content">
				<form id="form_search_friends">
					<img class="tab_bullet" id="friends_bullet" src="images/icons/bullet_white.png" />
					<input class="left_search_box tips gray_text" value="Search your people..." type="input" id="search_friends" autocomplete="off" title="People Search::Allows you to search through groups you're apart of to see what's being said to them.  Click add on a group to add it to your message"></input>
				</form>
				</span>

				<span id="default_friend_tabs" class="default_tabs">
				<!-- START of Network -->
				<?php
                                if(isset($_t['network_tab_list']) && $_t['network_tab_list'] != ''){
                                    foreach($_t['network_tab_list'] as $v){
                                        echo $v;
                                    }
                                }
                                ?>
				</span>
				<ul id="search_friends_results" class="my_search_results">
				</ul>
		
				</div>

				<!-- END of Network -->	

				<li class="tab" id="groups">
					<span id="groups_inner"  class="inner_tab_content">
						<img class="tab_bullet" id="groups_bullet" src="images/icons/bullet_white.png" />
						Groups &nbsp
						<img src="images/icons/group.png" /> 
						<span class="tab_counter" id="groups_counter">0</span>
					</span>

					 <span id="search_groups_toggle" class="search_toggle_mag">
                                                <img id="search_groups_toggle_img" src="images/icons/magnifier.png" />
                                        </span>
				</li>

				<div id="groups_tab_slide">
				<span class="hidden_content">
				<form id="form_search_groups">
					<img class="tab_bullet" id="groups_bullet" src="images/icons/bullet_white.png" />
					<input  class="left_search_box tips gray_text" value="Search your groups..." type="input" id="search_groups" autocomplete="off" title="Group Search::Allows you to search through groups you're apart of to see what's being said to them.  Click add on a group to add it to your message "></input>
				</form>
				</span>

				<span id="default_group_tabs"  class="default_tabs">
				<!-- START of Individual Groups -->	
				<?php
				if(isset($_t['group_tab_list']) && $_t['group_tab_list'] != ''){
				    foreach($_t['group_tab_list'] as $v){
					echo $v;
				    }
				}
				?>
				</span>
				<ul id="search_groups_results" class="my_search_results">
				</ul>

				</div>
				<!-- END of Individual Groups -->	

				<li class="tab" id="rels">
					<span id="rels_inner"  class="inner_tab_content">
						<img class="tab_bullet" id="rels_bullet" src="images/icons/bullet_white.png" />
						<img id="rel_toggle" src="images/icons/bullet_toggle_minus.png" />Filters &nbsp
						<img src="images/icons/transmit_go.png" />
						<span class="tab_counter" id="rels_counter">0</span>
					</span>
					 <span id="search_rels_toggle" class="search_toggle_mag">
                                                <img id="search_rels_toggle_img" src="images/icons/magnifier.png" />
                                        </span>

				</li>
				<div id="rel_tab_slide">

				<span class="hidden_content">
				<form id="form_search_rels">
					<img class="tab_bullet" id="groups_bullet" src="images/icons/bullet_white.png" />
					<input  class="left_search_box tips gray_text" value="Search your groups..." type="input" id="search_rels" autocomplete="off" title="Group Search::Allows you to search through groups you're apart of to see what's being said to them.  Click add on a group to add it to your message "></input>
				</form>
				</span>

				<span id="default_rel_tabs"  class="default_tabs">
				<!-- START of Relevancy Settings -->	
				 <?php
                                if(isset($_t['get_rel_tab_names']) && $_t['get_rel_tab_names'] != ''){
                                    foreach($_t['get_rel_tab_names'] as $v){
                                        echo $v;
                                    }
                                }
                                ?>
				</span>

				<ul id="search_rels_results" class="my_search_results">
				</ul>

				</div>
				<!-- END of Relevancy Settings -->	
			</ul>
		</div>

	</div>

<div id="container">

	<div id="forms">
		<ul>
		<form action="<?=ROOT?>" method="post" >
				<fieldset>
					<div id="core">
			
					<ul id="top_form">
						<li><textarea class="gray_text question tips" maxlength="254" rows="2" cols="15" id="question" title="Tap Box :: Once you've targeted people say something to them that might either interest them or make them want to respond to you.">Tap the connected...</textarea></li>
						<li id="outter_button">
						</li>
					</ul>
					
					</div>
			
				</fieldset>
		</form>
	
	</div>

	<div id="targets">
		<form id="form_targets">
					<input id="input_targets" type="text"></input>
					<input type="submit" id="submit_button"  value="Tap"></input>
		</form>
	
	</div>

	<span id="clear_chat_windows" ></span><span id="clear_err">You have no taps to clear</span>
	<div id="chat_windows"></div>
	<!--	
	-->

	<div id="current_info_div">
		<span id="current_info_display"></span>
		<span id="current_info"></span>
		<span id="search_bar_middle"><input type="text" value="I'm looking for..." class="searchText"></input></span>
		

	<div id="outter_info_div">
	<div class="tips" title="Feed::The feed is where all information relevant to the current Group/Person/Filter you have selected.  All information will flow here, even if you say it! Give it a whirl." id="main_information">
		<div class="sub_information" id="direct_information">
		<?
                        if($_t['direct_bits'] && $_t['direct_bits'] != '')
                                foreach($_t['direct_bits'] as $v){echo $v;
                        } else {
                                echo "<img src='images/icons/error.png' /><span class='null_info' id='null_direct'> You are not in any direct, <a href='search_people'>here</a> to find direct to tap</span>";
                        }
                ?>
		</div>
		<div class="sub_information" id="archives_information">
		There are no archives in the testing mode.
		</div>
		<div class="sub_information" id="active_information">
		To view your individual active conversations, click the individual tabs on the left ( if you don't see any, you don't have any active conversations ) 
		</div>
		<?php
                        if(isset($_t['active_bits']) && $_t['active_bits'] != ''){
                                foreach($_t['active_bits'] as $v){
                                        echo $v;
                                }
                        }
                ?>
		<div class="sub_information" id="building_information">
		<?
                        if($_t['building_bits'] && $_t['building_bits'] != '')
                                foreach($_t['building_bits'] as $v){echo $v;
                        } else {
                                echo "<img src='images/icons/error.png' /><span class='null_info' id='null_building'> You are not in any building, <a href='building'>here</a> to find building to tap</span>";
                        }
                ?>
		</div>
<? 

		if($_t['individual_friend_bits'] && $_t['individual_friend_bits'] != '')
			foreach($_t['individual_friend_bits'] as $v){echo $v;
		} else {
			echo "<img src='images/icons/error.png' /><span class='null_info' id='null_friend_ind'> You have nobody on tap who is active click <a href='people_search'>here</a> to find people to tap who are active!</span>";
		}
?>
	
		<div class="sub_information" id="friends_information">
<? 

		if($_t['friends_bits'] && $_t['friends_bits'] != '')
			foreach($_t['friends_bits'] as $v){echo $v;
		} else {
			echo "<img src='images/icons/error.png' /><span class='null_info' id='null_friends_aggr'> You have nobody on tap who is active click <a href='people_search'>here</a> to find people to tap who are active!</span>";
		}
?>
		</div>

                <div class="sub_information" id="groups_information">
		<!-- <div class="ihp_ad" id="groups_ad"><img src='pictures/<?=$user_pic?>' /><?=$uname?>: Hey people, check out my new ad! <a href="http://google.com">My New Site</a></div> -->
		<?
			if($_t['groups_bits'] && $_t['groups_bits'] != '') 
				foreach($_t['groups_bits'] as $v){echo $v;
			} else { 
				echo "<img src='images/icons/error.png' /> <span class='null_info' id='null_groups_aggr'> You are not in any groups, <a href='groups'>here</a> to find groups to tap</span>";
			}
		?>      
                </div>

		<?php
		if($_t['group_bits'] && $_t['group_bits'] != ''){
			foreach($_t['group_bits'] as $v){
				echo $v;
			}
		} else { 
		}
		?>

                <div class="sub_information" id="rels_information">
		<?
                        if($_t['rel_bits'] && $_t['rel_bits'] != '')
                                foreach($_t['rel_bits'] as $v){echo $v;
                        } else {
                                echo "<span class='null_info' id='null_rel'>You have no filters set, <a href='rel'>here</a> to find rel to tap</span>";
                        }
                ?>
		</div>

		<?
                        if($_t['individual_rel_bits'] && $_t['individual_rel_bits'] != '')
                                foreach($_t['individual_rel_bits'] as $v){echo $v;
                        } else {
                        }
                ?>

	</div>

	<div id="footer">


<?php include(FOOTER);?>
	
	</div>
	
</div>

<!-- End main information -->
</div>

<!-- End container -->
</div>


	<div id="right_container">

		<div id="notifications">
			<ul>
			<?
			if(is_array($_t['init_notifications']))
				foreach($_t['init_notifications'] as $v)
					echo $v;
			?>
			<li></li>
			</ul>
		</div>

		   <div id="left_notifications"> 
                        <span id="tap_status_title">tap status</span> <br/> 
                        <span id="tap_status_descr"> <img src="images/icons/information.png" />  tap status shows you who's getting your message.  If nobody gets your message, we'll let you know, and you can pitch that message to different people</span> 
                        <table id="tap_status_table">
                        <thead><td></td><td>tapped</td></thead>
                        <tbody id="tap_status_table_body">
                        </tbody>
                        <tfoot>
                        <tr><td># of people you tapd</td></tr>
                        </tfoot>
                        </table>

                </div>

		<div id="left_tabs">
			<ul id="left_tabs_list">
				<li style="color:red;" class="tab" id="archives" ><img id="archives_bullet" src="images/icons/bullet_white.png" />Archive &nbsp<img src="images/icons/text_align_left.png" /></li>
				<li class="tab tips" id="active"   title="Active Convo :: Active Convos are conversations you're currently engaged with.  Usually a tap you've said or replied to."><img id="active_bullet" src="images/icons/bullet_white.png" />Active Convos &nbsp<img src="images/icons/comments.png" /></li>
				<?php
				if(isset($_t['active_bits_tabs']) && $_t['active_bits_tabs'] != ''){
					foreach($_t['active_bits_tabs'] as $v){
						echo $v;
					}
				}
				?>

			</ul>
		</div>

<!-- End large container -->
</div>

    <script type="text/javascript">


    // Set this to something unique to this client
	document.domain = "<?=DOMAIN?>";
    Meteor.hostid = '<?=$_SESSION['rand_id']?>';
    Meteor.port = '8080';
//	Meteor.debugmode = 1;

    // Our Meteor server is on the data. subdomain
    Meteor.host = location.hostname;
    // Call the test() function when data arrives
    Meteor.registerEventCallback("process", function(data) { bg2.grab_bits(data); } );

    // Join the demo channel and get last five events, then stream
    Meteor.joinChannel("<?=$_t['pcid'];?>", 0);
    Meteor.mode = 'stream';

    // Start streaming!
        Meteor.connect();
    // Handle incoming events
    //function test(data) { console.log(data); }
</script>
</body>
</html>

